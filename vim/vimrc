set nocompatible
filetype plugin indent on
syntax on

set tabstop=2 softtabstop=2
set shiftwidth=2
set expandtab
set smartindent

set mouse=a
set guicursor=
set number
set relativenumber
set nohlsearch
set hidden
set noerrorbells
set nowrap
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
set incsearch
set scrolloff=4
set noshowmode
set completeopt=menuone,noinsert,noselect
set cmdheight=2
set shortmess+=c
set clipboard=unnamed
set signcolumn=yes
set updatetime=50
set colorcolumn=80
highlight ColorColumn ctermbg=0 guibg=lightgrey

call plug#begin('~/.vim/plugged')

Plug 'gruvbox-community/gruvbox'

" lsp
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/completion-nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/playground'

" debugger Plugins
Plug 'puremourning/vimspector'
Plug 'szw/vim-maximizer'

" telescope requirements
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

Plug 'mbbill/undotree'
Plug 'tpope/vim-fugitive'
Plug 'dbeniamine/cheat.sh-vim'

call plug#end()

if executable('rg')
  let g:rg_derive_root='true'
endif

let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_invert_selection = 0
colorscheme gruvbox
set background=dark

let loaded_matchparen = 1
let mapleader = ' '

" treesitter highlighting
lua <<EOF
require("nvim-treesitter.configs").setup{
highlight = { enable = true },
indent = { enable =  true}
}
EOF

" fzf
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8  } }
let $FZF_DEFAULT_OPTS = '--reverse'

" file browsing
let g:netrw_browse_split = 2
let g:netrw_banner = 0
let g:netrw_winsize = 25
let g:netrw_localrmdir='rm -r'

" telescope
lua require('telescope').setup({defaults = {file_sorter = require('telescope.sorters').get_fzy_sorter}})
let g:telescope_cache_result = 1
let g:telescope_prime_fuzzy_find = 1

" completion
let g:completion_chain_complete_list = {
      \'default' : [
      \    {'complete_items': ['lsp', 'snippet']},
      \    {'mode': '<c-p>'},
      \    {'mode': '<c-n>'}
      \]
      \}

imap  <c-j> <Plug>(completion_next_source)
imap  <c-k> <Plug>(completion_prev_source)

let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy']
let g:completion_trigger_keyword_length = 2
lua require("lspconfig").tsserver.setup{ on_attach=require("completion").on_attach }
imap <Tab> <Plug>(completion_smart_tab)
imap <S-tab> <Plug>(completion_smart_s_tab)

" diagnostic
let g:diagnostic_insert_delay = 1
let g:diagnostic_show_sign = 1
let g:diagnostic_enable_virtual_text = 1

" key mapping
inoremap <C-c> <Esc>
nnoremap <leader>u    :UndotreeShow<CR>
nnoremap <leader>pv   :Sex!<CR>
nnoremap <leader>rs   :resize 100<CR>
nnoremap <leader><CR> :source ~/projects/dotfiles/vim/vimrc<CR>

nnoremap <C-p>        :lua require('telescope.builtin').git_files()<CR>
nnoremap <Leader>pf   :lua require('telescope.builtin').find_files()<CR>
nnoremap <leader>ps   :lua require('telescope.builtin').grep_string({ search = vim.fn.input('Grep For: ')})<CR>
nnoremap <leader>pw   :lua require('telescope.builtin').grep_string({ search = vim.fn.expand('<cword>') })<CR>
nnoremap <leader>pb   :lua require('telescope.builtin').buffers()<CR>
nnoremap <leader>vh   :lua require('telescope.builtin').help_tags()<CR>

nnoremap ===          :lua vim.lsp.buf.formatting()<CR>
nnoremap <leader>vd   :lua vim.lsp.buf.definition()<CR>
nnoremap <leader>vi   :lua vim.lsp.buf.implementation()<CR>
nnoremap <leader>vsh  :lua vim.lsp.buf.signature_help()<CR>
nnoremap <leader>vrr  :lua vim.lsp.buf.references()<CR>
nnoremap <leader>vrn  :lua vim.lsp.buf.rename()<CR>
nnoremap <silent>K    :lua vim.lsp.buf.hover()<CR>
nnoremap <leader>vca  :lua vim.lsp.buf.code_action()<CR>
nnoremap <leader>vsd  :lua vim.lsp.diagnostic.show_line_diagnostics()<CR>

vnoremap J :move '>+1<CR>gv=gv
vnoremap K :move '<-2<CR>gv=gv
vnoremap X "_d
vnoremap <leader>p "_dP

" debugger remap
fun! GotoWindow(id)
  call win_gotoid(a:id)
  MaximizerToggle
endfun

" Debugger remaps
nnoremap <leader>m    :MaximizerToggle!<CR>
nnoremap <leader>dd   :call vimspector#Launch()<CR>
nnoremap <leader>dc   :call GotoWindow(g:vimspector_session_windows.code)<CR>
nnoremap <leader>dt   :call GotoWindow(g:vimspector_session_windows.tagpage)<CR>
nnoremap <leader>dv   :call GotoWindow(g:vimspector_session_windows.variables)<CR>
nnoremap <leader>dw   :call GotoWindow(g:vimspector_session_windows.watches)<CR>
nnoremap <leader>ds   :call GotoWindow(g:vimspector_session_windows.stack_trace)<CR>
nnoremap <leader>do   :call GotoWindow(g:vimspector_session_windows.output)<CR>
nnoremap <leader>de   :call vimspector#Reset()<CR>
nnoremap <leader>dtcb :call vimspector#CleanLineBreakpoint()<CR>

nmap <leader>dl <Plug>VimspectorStepInto
nmap <leader>dj <Plug>VimspectorStepOver
nmap <leader>dk <Plug>VimspectorStepOut
nmap <leader>d_ <Plug>VimspectorRestart
nnoremap <leader>d<space> :call vimspector#Continue()<CR>

nmap <leader>drc <Plug>VimspectorRunToCursor
nmap <leader>dbp <Plug>VimspectorToggleBreakpoint
nmap <leader>dcbp <Plug>VimspectorToggleConditionalBreakpoint

" :h quote+ | copy to register +
nnoremap <leader>y "+y
vnoremap <leader>y "+y

" copy all
nnoremap <leader>Y gg"+yG

fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

augroup highlight_yank
  autocmd!
  autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank({timeout = 40})
augroup END

augroup THEALEMAZING
  autocmd!
  autocmd BufWritePre * :call TrimWhitespace()
  autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
augroup END
