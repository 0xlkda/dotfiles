# Set the shell to zsh
export SHELL=/usr/local/bin/zsh
export LANG=en_US.UTF8
export LC_ALL=en_US.UTF-8
export CONFIG_HOME=$HOME/.config
export HISTFILE=$HOME/.local/zsh_history

autoload -Uz compinit
compinit

# Changing Directories
setopt auto_cd                 # if a command isn't valid, but is a directory, cd to that dir
setopt auto_pushd              # make cd push the old directory onto the directory stack
setopt pushd_ignore_dups       # donâ€™t push multiple copies of the same directory onto the directory stack
#
# Completions
setopt always_to_end           # move cursor to the end of a completed word
setopt auto_list               # automatically list choices on ambiguous completion
setopt auto_menu               # show completion menu on a successive tab press
setopt auto_param_slash        # if completed parameter is a directory, add a trailing slash
setopt complete_in_word        # complete from both ends of a word
unsetopt menu_complete         # don't autoselect the first completion entry

# Expansion and Globbing
setopt extended_glob           # use more awesome globbing features
setopt glob_dots               # include dotfiles when globbing

# History
setopt append_history          # append to history file
setopt extended_history        # write the history file in the ':start:elapsed;command' format
unsetopt hist_beep             # don't beep when attempting to access a missing history entry
setopt hist_expire_dups_first  # expire a duplicate event first when trimming history
setopt hist_find_no_dups       # don't display a previously found event
setopt hist_ignore_all_dups    # delete an old recorded event if a new event is a duplicate
setopt hist_ignore_dups        # don't record an event that was just recorded again
setopt hist_ignore_space       # don't record an event starting with a space
setopt hist_no_store           # don't store history commands
setopt hist_reduce_blanks      # remove superfluous blanks from each command line being added to the history list
setopt hist_save_no_dups       # don't write a duplicate event to the history file
setopt hist_verify             # don't execute immediately upon history expansion
setopt inc_append_history      # write to the history file immediately, not when the shell exits
unsetopt share_history         # don't share history between all sessions

# Input/Output
unsetopt clobber               # must use >| to truncate existing files
unsetopt correct               # don't try to correct the spelling of commands
unsetopt correct_all           # don't try to correct the spelling of all arguments in a line
unsetopt flow_control          # disable start/stop characters in shell editor
setopt interactive_comments    # enable comments in interactive shell
setopt path_dirs               # perform path search even on command names with slashes
setopt rc_quotes               # allow 'Henry''s Garage' instead of 'Henry'\''s Garage'
unsetopt rm_star_silent        # ask for confirmation for `rm *' or `rm path/*'

# Prompting
setopt prompt_subst           # expand parameters in prompt variables

# Zle
# http://zsh.sourceforge.net/Doc/Release/Options.html#Zle
unsetopt beep                 # be quiet!
setopt combining_chars        # combine zero-length punctuation characters (accents) with the base character
setopt emacs                  # use emacs keybindings in the shell

# Plugins
source $CONFIG_HOME/antigen/antigen.zsh
antigen bundle 'git'
antigen bundle 'zsh-users/zsh-syntax-highlighting'
antigen bundle 'zsh-users/zsh-autosuggestions'
antigen bundle 'zsh-users/zsh-completions'
antigen apply

# My "Plugins"
sources=()

for s in "${sources[@]}"; do
  source $CONFIG_HOME/zsh/include/${s}.zsh
done

# starship prompt
eval "$(starship init zsh)"

# better history
zle -N history-fzy
bindkey '^r' history-fzy

function history-fzy() {
  local tac

  if which tac > /dev/null; then
    tac="tac"
  else
    tac="tail -r"
  fi

  BUFFER=$(history -n 1 | eval $tac | awk '!a[$0]++' | fzy --query "$LBUFFER")
  CURSOR=$#BUFFER

  zle reset-prompt
}

# Alias
alias vim='nvim'
alias reload='source ~/.zshrc'
alias cleanup='fd --no-ignore --hidden .DS_Store . | xargs rm'
alias dotconf='cd ~/coding/dotfiles; vim'
alias vimconf='vim ~/coding/dotfiles/nvim/init.lua'
alias zshconf='vim ~/coding/dotfiles/zsh/zshrc'
alias yaconf='vim ~/coding/dotfiles/yabai/yabairc'
alias bashconf='vim ~/coding/dotfiles/bash/bashrc'
alias tmuxconf='vim ~/coding/dotfiles/tmux/tmux.conf'
alias tn='tmuxinator n'
alias to='tmuxinator o'
alias ts='tmuxinator s'
alias pm='pnpm'
alias cpwd="pwd | tr -d '\n' | pbcopy && echo 'pwd copied to clipboard'"
alias alacritty='/Applications/Alacritty.app/Contents/MacOS/alacritty'
alias wf=workfile
alias wd=workdir
alias wt=worktree
alias j2v=json2csv
alias pg=/Applications/Postgres.app/Contents/Versions/15/bin/psql

# Tree
alias tree='tree -CIa    "node_modules|dist|.git|.cache|.next|.turbo|.parcel-cache|.undodir" --dirsfirst'
alias t1='tree -L 1 -CIa "node_modules|dist|.git|.cache|.next|.turbo|.parcel-cache|.undodir" --dirsfirst'
alias t2='tree -L 2 -CIa "node_modules|dist|.git|.cache|.next|.turbo|.parcel-cache|.undodir" --dirsfirst'
alias t3='tree -L 3 -CIa "node_modules|dist|.git|.cache|.next|.turbo|.parcel-cache|.undodir" --dirsfirst'

# ls
alias ls="gls --width 42 --group-directories-first --color=auto"
alias lsr="gls -R" # list recursive
alias lsrf="gls -Rohg" # list recursive full details
alias ll="gls -lh --group-directories-first --color=auto"
alias la="gls -lAh --group-directories-first --color=auto"

# quick jump
zle -N workdir
zle -N worktree

bindkey '^g' workdir
bindkey '^t' worktree

function workdir() {
  local result=""

  if [ $# -gt 1 ] && echo "Too many agruments" && return

  if [ $# -gt 0 ]; then
    result=$(fd --type directory . $1)
  else
    result=$(fd --type directory . ~/coding)
  fi

  # validate fd command before pipe to fzy
  if [ -z "$result" ] && echo "No directory match query: $1" && return

  # validate fzy selection before next execution
  local selection=$(echo $result | fzy)
  if [ -z "$selection" ] && return

  cd $selection
}

function worktree() {
  local result=$(git worktree list)

  # validate fd command before pipe to fzy
  if [ -z "$result" ] && echo "No directory match query: $1" && return

  # validate fzy selection before next execution
  local selection=$(echo $result | fzy)
  if [ -z "$selection" ] && return

  # cd to target directory
  local target=$(echo $selection | awk '{print $1}')
  cd $target
}

# NPM
export NVM_DIR="$HOME/.nvm"
export PATH="./node_modules/.bin:$PATH"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

alias nr="npm run"
alias np="npm version patch && npm publish && git push origin master --tags"

# csv viewer
csview() {
  local file="$1"
  cat "$file" | sed 's/,/ ,/g' | column -t -s, | less -S
}

# shopify env
source $HOME/coding/dotfiles/shopify_alias.sh
alias theme='shopify theme'

# Deno
export DENO_INSTALL="/Users/alex/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# bun completions
[ -s "/Users/alex/.bun/_bun" ] && source "/Users/alex/.bun/_bun"

# Bun
export BUN_INSTALL="/Users/alex/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# ruby
export PATH="/usr/local/opt/ruby/bin:$PATH"

# pnpm
export PNPM_HOME="/Users/alex/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"

# utils
function slugify() {
  # Forcing the POSIX local so alnum is only 0-9A-Za-z
  export LANG=POSIX
  export LC_ALL=POSIX

  # Keep only alphanumeric value
  # Keep only one dash if there is multiple one consecutively
  # Lowercase everything
  # Remove last dash if there is nothing after
  sed -e 's/[^[:alnum:]]/-/g' | tr -s '-' | tr A-Z a-z | sed -e 's/-$//'
}
