# Prevent duplicate when sourcing
typeset -U path
typeset -U fpath

fpath=("$HOME/code/dotfiles/zsh/functions/" $fpath)
path=("$HOME/code/dotfiles/bin" "$HOME/.local/bin" $path)

# Changing directories
setopt auto_cd                 # if a command isn't valid, but is a directory, cd to that dir
setopt auto_pushd              # make cd push the old directory onto the directory stack
setopt pushd_ignore_dups       # donâ€™t push multiple copies of the same directory onto the directory stack

# Expansion and Globbing
setopt extended_glob           # use more awesome globbing features
setopt glob_dots               # include dotfiles when globbing

# Completions
setopt auto_list               # automatically list choices on ambiguous completion
setopt auto_menu               # show completion menu on a successive tab press
setopt complete_in_word        # complete from both ends of a word

# History
setopt append_history          # append to history file
setopt extended_history        # write the history file in the ':start:elapsed;command' format
unsetopt hist_beep             # don't beep when attempting to access a missing history entry
setopt hist_expire_dups_first  # expire a duplicate event first when trimming history
setopt hist_find_no_dups       # don't display a previously found event
setopt hist_ignore_all_dups    # delete an old recorded event if a new event is a duplicate
setopt hist_ignore_dups        # don't record an event that was just recorded again
setopt hist_ignore_space       # don't record an event starting with a space
setopt hist_no_store           # don't store history commands
setopt hist_reduce_blanks      # remove superfluous blanks from each command line being added to the history list
setopt hist_save_no_dups       # don't write a duplicate event to the history file
setopt hist_verify             # don't execute immediately upon history expansion
setopt inc_append_history      # write to the history file immediately, not when the shell exits
setopt share_history           # share history between all sessions

# Input/Output
unsetopt rm_star_silent        # ask for confirmation for `rm *' or `rm path/*'

# using Vi bindings
bindkey -v
bindkey -M viins "^A" beginning-of-line
bindkey -M viins "^E" end-of-line
bindkey -M viins "^F" forward-char
bindkey -M viins "^B" backward-char
bindkey -M viins "^D" delete-char-or-list
bindkey -M viins "^U" backward-kill-line
bindkey -M viins "^K" vi-kill-eol
bindkey -M viins "^N" down-line-or-history
bindkey -M viins "^P" up-line-or-history

# Prompt
eval "$(starship init zsh)"

# History fuzzy searching
bindkey '^r' history-fzy
zle -N history-fzy
function history-fzy() {
  BUFFER=$(history -n 1 | awk '!a[$0]++' | fzy --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle reset-prompt
}

# Quick jump
zle -N workdir
zle -N worktree

bindkey '^g' workdir
bindkey '^t' worktree

function workdir() {
  local result=""
  if [ $# -gt 1 ] && echo "Too many agruments" && return
  if [ $# -gt 0 ]; then
    result=$(fd --type directory . $1)
  else
    result=$(fd --type directory . $HOME/code)
  fi

  if [ -z "$result" ] && echo "No directory match query: $1" && return

  local selection=$(echo $result | fzy)
  if [ "$selection" ] && cd $selection && zle reset-prompt
}

function worktree() {
  local result=$(git worktree list)

  # validate fd command before pipe to fzy
  if [ -z "$result" ] && echo "No directory match query: $1" && return

  # validate fzy selection before next execution
  local selection=$(echo $result | fzy)
  if [ -z "$selection" ] && return

  # extracting path from fzy selection
  local target=$(echo $selection | awk '{print $1}')
  if [ "$target" ] && cd $target && zle reset-prompt
}

# disable less history
export LESSHISTFILE=-

# asdf
#source /opt/local/share/asdf/asdf.sh

# Completions | autogen from compinstall
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' list-suffixes true
zstyle :compinstall filename "$HOME/code/dotfiles/zsh/zshrc"

autoload -Uz compinit
compinit

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true

# Ask for select tmux sessions
if [[ ! -v TMUX && $TERM_PROGRAM != "vscode" ]]; then
	tmux-selector.sh
fi

# direnv
eval "$(direnv hook zsh)"

# main editor
export EDITOR=nvim
